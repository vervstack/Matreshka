syntax = "proto3";

package matreshka_be_api;

import "google/api/annotations.proto";
import "npm.proto";

option go_package = "/matreshka_be_api";
option (npm_package) = "@vervstack/matreshka";

service MatreshkaBeAPI {
  rpc ApiVersion(ApiVersion.Request) returns (ApiVersion.Response) {
    option (google.api.http) = {
      get: "/api/version"
    };
  };

  rpc GetConfig(GetConfig.Request) returns (GetConfig.Response) {
    option (google.api.http) = {
      get: "/api/config/{config_name}",
    };
  }
  rpc GetConfigNodes(GetConfigNode.Request) returns (GetConfigNode.Response) {
    option (google.api.http) = {
      post: "/api/config/nodes",
      body: "*"
    };
  }
  rpc ListConfigs(ListConfigs.Request) returns (ListConfigs.Response) {
    option (google.api.http) = {
      post: "/api/config/list",
      body: "*"
    };
  }

  rpc CreateConfig(CreateConfig.Request) returns (CreateConfig.Response) {
    option (google.api.http) = {
      post: "/api/config/{config_name}/new",
      body: "*"
    };
  }

  rpc PatchConfig(PatchConfig.Request) returns (PatchConfig.Response) {
    option (google.api.http) = {
      post: "/api/config/{config_name}/patch",
      body: "*"
    };
  }

  rpc StoreConfig(StoreConfig.Request) returns (StoreConfig.Response) {
    option (google.api.http) = {
      post: "/api/config/{config_name}/store",
      body: "*"
    };
  }

  rpc RenameConfig(RenameConfig.Request) returns (RenameConfig.Response) {
    option (google.api.http) = {
      post: "/api/config/{config_name}/rename/{new_name}",
    };
  }

  rpc SubscribeOnChanges(stream SubscribeOnChanges.Request) returns (stream SubscribeOnChanges.Response) {}
}

message Config {
  string name = 1;
  string version = 2;
  int64 updated_at_utc_timestamp = 3;
  repeated string versions = 4;
}

message Paging {
  uint32 limit = 1;
  uint32 offset = 2;
}

message ApiVersion {
  message Request {}
  message Response {
    string version = 1;
  }
}

message GetConfig {
  message Request {
    string config_name = 1;
    optional string version = 2;
    Format format = 3;
  }

  message Response {
    bytes config = 1;
  }
}

message PatchConfig {
  message Request {
    string config_name = 1;
    optional string version = 2;
    repeated Patch patches = 3;
  }

  message Response {}

  message Patch {
    string field_name = 1;
    oneof patch {
      string rename = 2;
      string update_value = 3;
      bool delete = 4;
    }
  }
}

message StoreConfig {
  message Request {
    //Config format. Default - yaml
    Format format = 1;
    string config_name = 2;
    optional string version = 3;
    bytes config = 4;
  }

  message Response {

  }
}

message ListConfigs {
  message Request {
    Paging paging = 1;
    string search_pattern = 2;
    optional Sort sort = 3;
  }

  message Response {
    repeated Config configs = 1;
    uint32 total_records = 2;
  }
}

message Node {
  string name = 1;
  optional string value = 2;
  repeated Node   inner_nodes = 3;
}

message GetConfigNode {
  message Request {
    string config_name = 1;
    string version = 2;
  }

  message Response {
    Node root = 1;
    repeated string versions = 2;
  }
}

message CreateConfig {
  message Request {
    string config_name = 1;
    optional ConfigTypePrefix type = 2;
  }

  message Response {
    // name based on provided config_name and type.
    // e.g. for Verv configuration with name "matreshka"
    // unique name identifier will be verv_matreshka
    string name = 1;
  }
}

message RenameConfig {
  message Request {
    string config_name = 1;
    string new_name = 2;
  }
  message Response {
    string new_name = 1;
  }
}

message Sort {
  Type type = 1;
  bool desc = 2;
  enum Type {
    default = 0;
    by_name = 1;
    by_updated_at = 2;
  }
}

message SubscribeOnChanges {
  message Request {
    repeated string subscribe_config_names = 1;
    repeated string unsubscribe_config_names = 2;
  }

  message Response {
    string config_name = 1;
    uint32 timestamp = 2;

    repeated PatchConfig.Patch patches = 3;
  }
}

enum ConfigTypePrefix {
  // Plain text blob config - saved and configured externally by user
  // Not recommended to use - unstructured and cannot be validated.
  // Simply a text storage
  plain = 0;
  // Matreshka's configuration for application
  verv = 1;
  // Configuration for object storage (Minio)
  minio = 2;
  // Configuration for Postgresql Database
  pg = 3;
  // Configuration for Nginx/Angie web server
  nginx = 4;
  // Basically a key-value configuration
  kv = 5;
}

enum Format {
  yaml = 0; // Default
  env = 1;
}